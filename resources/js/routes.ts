/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by laravel-typescriptable
const Routes: Record<App.Route.Name, App.Route.Link> = {
  'login': {
    name: 'login',
    path: '/login',
    params: undefined,
    methods: ['POST', 'GET'],
  },
  'logout': {
    name: 'logout',
    path: '/logout',
    params: undefined,
    methods: ['POST'],
  },
  'password.request': {
    name: 'password.request',
    path: '/forgot-password',
    params: undefined,
    methods: ['GET'],
  },
  'password.reset': {
    name: 'password.reset',
    path: '/reset-password/{token}',
    params: {
      token: 'string',
    },
    methods: ['GET'],
  },
  'password.email': {
    name: 'password.email',
    path: '/forgot-password',
    params: undefined,
    methods: ['POST'],
  },
  'password.update': {
    name: 'password.update',
    path: '/reset-password',
    params: undefined,
    methods: ['POST'],
  },
  'register': {
    name: 'register',
    path: '/register',
    params: undefined,
    methods: ['POST', 'GET'],
  },
  'verification.notice': {
    name: 'verification.notice',
    path: '/email/verify',
    params: undefined,
    methods: ['GET'],
  },
  'verification.verify': {
    name: 'verification.verify',
    path: '/email/verify/{id}/{hash}',
    params: {
      id: 'string', hash: 'string',
    },
    methods: ['GET'],
  },
  'verification.send': {
    name: 'verification.send',
    path: '/email/verification-notification',
    params: undefined,
    methods: ['POST'],
  },
  'user-profile-information.update': {
    name: 'user-profile-information.update',
    path: '/user/profile-information',
    params: undefined,
    methods: ['PUT'],
  },
  'user-password.update': {
    name: 'user-password.update',
    path: '/user/password',
    params: undefined,
    methods: ['PUT'],
  },
  'user/confirm-password': {
    name: 'user/confirm-password',
    path: '/user/confirm-password',
    params: undefined,
    methods: ['GET'],
  },
  'password.confirmation': {
    name: 'password.confirmation',
    path: '/user/confirmed-password-status',
    params: undefined,
    methods: ['GET'],
  },
  'password.confirm': {
    name: 'password.confirm',
    path: '/user/confirm-password',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.login': {
    name: 'two-factor.login',
    path: '/two-factor-challenge',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor-challenge': {
    name: 'two-factor-challenge',
    path: '/two-factor-challenge',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.enable': {
    name: 'two-factor.enable',
    path: '/user/two-factor-authentication',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.confirm': {
    name: 'two-factor.confirm',
    path: '/user/confirmed-two-factor-authentication',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.disable': {
    name: 'two-factor.disable',
    path: '/user/two-factor-authentication',
    params: undefined,
    methods: ['DELETE'],
  },
  'two-factor.qr-code': {
    name: 'two-factor.qr-code',
    path: '/user/two-factor-qr-code',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor.secret-key': {
    name: 'two-factor.secret-key',
    path: '/user/two-factor-secret-key',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor.recovery-codes': {
    name: 'two-factor.recovery-codes',
    path: '/user/two-factor-recovery-codes',
    params: undefined,
    methods: ['GET'],
  },
  'user/two-factor-recovery-codes': {
    name: 'user/two-factor-recovery-codes',
    path: '/user/two-factor-recovery-codes',
    params: undefined,
    methods: ['POST'],
  },
  'terms.show': {
    name: 'terms.show',
    path: '/terms-of-service',
    params: undefined,
    methods: ['GET'],
  },
  'policy.show': {
    name: 'policy.show',
    path: '/privacy-policy',
    params: undefined,
    methods: ['GET'],
  },
  'profile.show': {
    name: 'profile.show',
    path: '/user/profile',
    params: undefined,
    methods: ['GET'],
  },
  'other-browser-sessions.destroy': {
    name: 'other-browser-sessions.destroy',
    path: '/user/other-browser-sessions',
    params: undefined,
    methods: ['DELETE'],
  },
  'current-user-photo.destroy': {
    name: 'current-user-photo.destroy',
    path: '/user/profile-photo',
    params: undefined,
    methods: ['DELETE'],
  },
  'current-user.destroy': {
    name: 'current-user.destroy',
    path: '/user',
    params: undefined,
    methods: ['DELETE'],
  },
  'api-tokens.index': {
    name: 'api-tokens.index',
    path: '/user/api-tokens',
    params: undefined,
    methods: ['GET'],
  },
  'api-tokens.store': {
    name: 'api-tokens.store',
    path: '/user/api-tokens',
    params: undefined,
    methods: ['POST'],
  },
  'api-tokens.update': {
    name: 'api-tokens.update',
    path: '/user/api-tokens/{token}',
    params: {
      token: 'string',
    },
    methods: ['PUT'],
  },
  'api-tokens.destroy': {
    name: 'api-tokens.destroy',
    path: '/user/api-tokens/{token}',
    params: {
      token: 'string',
    },
    methods: ['DELETE'],
  },
  'sanctum.csrf-cookie': {
    name: 'sanctum.csrf-cookie',
    path: '/sanctum/csrf-cookie',
    params: undefined,
    methods: ['GET'],
  },
  'api.app.index': {
    name: 'api.app.index',
    path: '/api/app',
    params: undefined,
    methods: ['GET'],
  },
  'api.app.stats': {
    name: 'api.app.stats',
    path: '/api/app/stats',
    params: undefined,
    methods: ['GET'],
  },
  'api.app.count': {
    name: 'api.app.count',
    path: '/api/app/count',
    params: undefined,
    methods: ['GET'],
  },
  'api.authors.index': {
    name: 'api.authors.index',
    path: '/api/authors',
    params: undefined,
    methods: ['GET'],
  },
  'api.authors.show': {
    name: 'api.authors.show',
    path: '/api/authors/{author_slug}',
    params: {
      author_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.authors.show.books': {
    name: 'api.authors.show.books',
    path: '/api/authors/{author_slug}/books',
    params: {
      author_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.authors.show.series': {
    name: 'api.authors.show.series',
    path: '/api/authors/{author_slug}/series',
    params: {
      author_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.books.index': {
    name: 'api.books.index',
    path: '/api/books',
    params: undefined,
    methods: ['GET'],
  },
  'api.books.show': {
    name: 'api.books.show',
    path: '/api/books/{author_slug}/{book_slug}',
    params: {
      author_slug: 'string', book_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.pages.index': {
    name: 'api.pages.index',
    path: '/api/cms/pages',
    params: undefined,
    methods: ['GET'],
  },
  'api.pages.show': {
    name: 'api.pages.show',
    path: '/api/cms/pages/{cms_page_slug}',
    params: {
      cms_page_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.download.book': {
    name: 'api.download.book',
    path: '/api/download/book/{author_slug}/{book_slug}',
    params: {
      author_slug: 'string', book_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.download.direct': {
    name: 'api.download.direct',
    path: '/api/download/book/direct/{author_slug}/{book_slug}',
    params: {
      author_slug: 'string', book_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.download.author': {
    name: 'api.download.author',
    path: '/api/download/author/{author_slug}/{format?}',
    params: {
      author_slug: 'string', format: 'string',
    },
    methods: ['GET'],
  },
  'api.download.serie': {
    name: 'api.download.serie',
    path: '/api/download/serie/{author_slug}/{serie_slug}/{format?}',
    params: {
      author_slug: 'string', serie_slug: 'string', format: 'string',
    },
    methods: ['GET'],
  },
  'api.entity.latest': {
    name: 'api.entity.latest',
    path: '/api/entities/latest',
    params: undefined,
    methods: ['GET'],
  },
  'api.entity.selection': {
    name: 'api.entity.selection',
    path: '/api/entities/selection',
    params: undefined,
    methods: ['GET'],
  },
  'api.entity.related': {
    name: 'api.entity.related',
    path: '/api/entities/related/{author_slug}/{book_slug}',
    params: {
      author_slug: 'string', book_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.entity.search': {
    name: 'api.entity.search',
    path: '/api/entities/search',
    params: undefined,
    methods: ['GET'],
  },
  'api.index': {
    name: 'api.index',
    path: '/api',
    params: undefined,
    methods: ['GET'],
  },
  'api.enums': {
    name: 'api.enums',
    path: '/api/enums',
    params: undefined,
    methods: ['GET'],
  },
  'api.posts.index': {
    name: 'api.posts.index',
    path: '/api/posts',
    params: undefined,
    methods: ['GET'],
  },
  'api.posts.show': {
    name: 'api.posts.show',
    path: '/api/posts/{post_slug}',
    params: {
      post_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.publishers.index': {
    name: 'api.publishers.index',
    path: '/api/publishers',
    params: undefined,
    methods: ['GET'],
  },
  'api.publishers.show': {
    name: 'api.publishers.show',
    path: '/api/publishers/{publisher_slug}',
    params: {
      publisher_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.publishers.books': {
    name: 'api.publishers.books',
    path: '/api/publishers/{publisher_slug}/books',
    params: {
      publisher_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.search.index': {
    name: 'api.search.index',
    path: '/api/search',
    params: undefined,
    methods: ['GET'],
  },
  'api.series.index': {
    name: 'api.series.index',
    path: '/api/series',
    params: undefined,
    methods: ['GET'],
  },
  'api.series.show': {
    name: 'api.series.show',
    path: '/api/series/{author_slug}/{serie_slug}',
    params: {
      author_slug: 'string', serie_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.series.next': {
    name: 'api.series.next',
    path: '/api/series/{author_slug}/{serie_slug}/{volume}/next',
    params: {
      author_slug: 'string', serie_slug: 'string', volume: 'string',
    },
    methods: ['GET'],
  },
  'api.series.show.books': {
    name: 'api.series.show.books',
    path: '/api/series/{author_slug}/{serie_slug}/books',
    params: {
      author_slug: 'string', serie_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.tags.index': {
    name: 'api.tags.index',
    path: '/api/tags',
    params: undefined,
    methods: ['GET'],
  },
  'api.tags.show': {
    name: 'api.tags.show',
    path: '/api/tags/{tag_slug}',
    params: {
      tag_slug: 'string',
    },
    methods: ['GET'],
  },
  'api.tags.show.books': {
    name: 'api.tags.show.books',
    path: '/api/tags/{tag_slug}/books',
    params: {
      tag_slug: 'string',
    },
    methods: ['GET'],
  },
  'front.books.index': {
    name: 'front.books.index',
    path: '/books',
    params: undefined,
    methods: ['GET'],
  },
  '/': {
    name: '/',
    path: '/',
    params: undefined,
    methods: ['GET'],
  },
  'catalog': {
    name: 'catalog',
    path: '/features/catalog',
    params: undefined,
    methods: ['GET'],
  },
  'opds': {
    name: 'opds',
    path: '/features/opds',
    params: undefined,
    methods: ['GET'],
  },
  'webreader': {
    name: 'webreader',
    path: '/features/webreader',
    params: undefined,
    methods: ['GET'],
  },
  'builder': {
    name: 'builder',
    path: '/features/builder',
    params: undefined,
    methods: ['GET'],
  },
  'catalog.authors': {
    name: 'catalog.authors',
    path: '/catalog/authors',
    params: undefined,
    methods: ['GET'],
  },
  'catalog.authors.character': {
    name: 'catalog.authors.character',
    path: '/catalog/authors/{character}',
    params: {
      character: 'string',
    },
    methods: ['GET'],
  },
  'catalog.authors.show': {
    name: 'catalog.authors.show',
    path: '/catalog/authors/{character}/{author}',
    params: {
      character: 'string', author: 'string',
    },
    methods: ['GET'],
  },
  'catalog.books.show': {
    name: 'catalog.books.show',
    path: '/catalog/books/{author}/{book}',
    params: {
      author: 'string', book: 'string',
    },
    methods: ['GET'],
  },
  'catalog.index': {
    name: 'catalog.index',
    path: '/catalog',
    params: undefined,
    methods: ['GET'],
  },
  'catalog.search': {
    name: 'catalog.search',
    path: '/catalog/search',
    params: undefined,
    methods: ['GET'],
  },
  'catalog.series': {
    name: 'catalog.series',
    path: '/catalog/series',
    params: undefined,
    methods: ['GET'],
  },
  'catalog.series.character': {
    name: 'catalog.series.character',
    path: '/catalog/series/{character}',
    params: {
      character: 'string',
    },
    methods: ['GET'],
  },
  'catalog.series.show': {
    name: 'catalog.series.show',
    path: '/catalog/series/{author}/{serie}',
    params: {
      author: 'string', serie: 'string',
    },
    methods: ['GET'],
  },
  'opds.authors.index': {
    name: 'opds.authors.index',
    path: '/opds/authors',
    params: undefined,
    methods: ['GET'],
  },
  'opds.authors.character': {
    name: 'opds.authors.character',
    path: '/opds/authors/{character}',
    params: {
      character: 'string',
    },
    methods: ['GET'],
  },
  'opds.authors.show': {
    name: 'opds.authors.show',
    path: '/opds/authors/{character}/{author}',
    params: {
      character: 'string', author: 'string',
    },
    methods: ['GET'],
  },
  'opds.books.show': {
    name: 'opds.books.show',
    path: '/opds/books/{author}/{book}',
    params: {
      author: 'string', book: 'string',
    },
    methods: ['GET'],
  },
  'opds.index': {
    name: 'opds.index',
    path: '/opds',
    params: undefined,
    methods: ['GET'],
  },
  'opds.latest': {
    name: 'opds.latest',
    path: '/opds/latest',
    params: undefined,
    methods: ['GET'],
  },
  'opds.random': {
    name: 'opds.random',
    path: '/opds/random',
    params: undefined,
    methods: ['GET'],
  },
  'opds.search': {
    name: 'opds.search',
    path: '/opds/search',
    params: undefined,
    methods: ['GET'],
  },
  'opds.series.index': {
    name: 'opds.series.index',
    path: '/opds/series',
    params: undefined,
    methods: ['GET'],
  },
  'opds.series.character': {
    name: 'opds.series.character',
    path: '/opds/series/{character}',
    params: {
      character: 'string',
    },
    methods: ['GET'],
  },
  'opds.series.show': {
    name: 'opds.series.show',
    path: '/opds/series/{character}/{serie}',
    params: {
      character: 'string', serie: 'string',
    },
    methods: ['GET'],
  },
  'webreader.reader': {
    name: 'webreader.reader',
    path: '/webreader/{author}/{book}',
    params: {
      author: 'string', book: 'string',
    },
    methods: ['GET'],
  },
  'api/user': {
    name: 'api/user',
    path: '/api/user',
    params: undefined,
    methods: ['GET'],
  },
  'dashboard': {
    name: 'dashboard',
    path: '/dashboard',
    params: undefined,
    methods: ['GET'],
  },
}

declare global {
  interface Window {
    Routes: Record<App.Route.Name, App.Route.Link>
  }
}

if (typeof window !== 'undefined') {
  if (typeof window !== undefined && typeof window.Routes !== undefined)
    window.Routes = Routes
}

export { Routes }
